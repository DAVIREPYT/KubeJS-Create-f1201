plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
	platformSetupLoomIde()
	forge()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
	dev
}

artifacts {
	dev(jar)
}

repositories {
	maven {
		url "https://maven.tterrag.com/"
		content {
			includeGroup "com.simibubi.create"
			includeGroup "com.jozufozu.flywheel"
			includeGroup "com.tterrag.registrate"
		}
	}
	maven {
		url "https://maven.theillusivec4.top/"
		content {
			includeGroup "top.theillusivec4.curios"
		}
	}

	maven {
		url 'https://dvs1.progwml6.com/files/maven'
		content {
			includeGroup "mezz.jei"
		}
	}
}
dependencies {
	forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

	modApi "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"
	modApi "com.simibubi.create:create-${rootProject.minecraft_version}:${rootProject.create_version}:slim"
	modApi "com.jozufozu.flywheel:flywheel-forge-${rootProject.minecraft_version}:${rootProject.flywheel_forge_version}"

	modLocalRuntime modCompileOnly("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}")

	common(project(path: ":common", configuration: "dev")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}
shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
	archiveClassifier.set null
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	classifier "dev"
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id
			releaseType = project.curseforge_type
			addGameVersion "Forge"
			addGameVersion "1.18.2"
			mainArtifact(remapJar.archivePath)
			relations {
				requiredDependency 'kubejs'
				requiredDependency 'create'
			}
			changelog = getGitChangelog
			changelogType = 'markdown'
		}
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-${project.name}"
			from components.java
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "latvian"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}
